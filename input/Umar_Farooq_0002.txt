Professor: Umar Farooq 0002
University: Louisiana State University
URL: https://csc.lsu.edu/~ufarooq
Description: About
(current)
Publications
Teaching
Service
CV

Umar Farooq
Assistant Professor
Computer Science & Engineering
 3209M Patrick F. Taylor Hall
 ufarooq at lsu.edu

 |  |  |  |  | 

Short Bio: I joined Computer Science & Engineering at Louisiana State University as an Assistant Professor in Fall 2023. Before that, I worked at ByteDance/TikTok as a software engineer for compiler infrastructure. I completed my Ph.D at University of California, Riverside where I was advised by Dr. Zhijia Zhao. I am fortunate to be recipient of a Best Paper Runner-up Award at MobiSys’18 and a ACM SIGMOBILE Research Highlights (2018).

Research Interests
Program analysis and optimzations to improve software relibaility.
Programming support for Mobile and AR/VR/XR systems.
Machine Learning and Software Engineering (e.g., AI4SE, SE4AI).

📢 I am looking for multiple highly motivated and talented students who are interested in any of the areas listed above to join my lab. If you are interested to join my lab, please reach out to me (include your CV and Transcript).

Current Students
Moshood A Fakorede (PhD student)
Vinaik Chhetri (PhD student)
Samrat Acharya (MS student)
News
Mar 31, 2023	MobileRec got accepted to appear at SIGIR’23.
Dec 19, 2022	Linker Code Size Optimization for Mobile Apps work got accepted at CC’23.
Selected Publications
SIGIR’23
MobileRec: A Large Scale Dataset for Mobile Apps Recommendation
MH Maqbool, Umar Farooq, Adib Mosharrof, AB Siddique, and Hassan Foroosh
In Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval, 2023
ABS BIB HTML PDF

Recommender systems have become ubiquitous in our digital lives, from recommending products on e-commerce websites to suggesting movies and music on streaming platforms. Existing recommendation datasets, such as Amazon Product Reviews and MovieLens, greatly facilitated the research and development of recommender systems in their respective domains. While the number of mobile users and applications (aka apps) has increased exponentially over the past decade, research in mobile app recommender systems has been significantly constrained, primarily due to the lack of high-quality benchmark datasets, as opposed to recommendations for products, movies, and news. To facilitate research for app recommendation systems, we introduce a large-scale dataset, called MobileRec. We constructed MobileRec from users’ activity on the Google play store. MobileRec contains 19.3 million user interactions (i.e., user reviews on apps) with over 10K unique apps across 48 categories. MobileRec records the sequential activity of a total of 0.7 million distinct users. Each of these users has interacted with no fewer than five distinct apps, which stands in contrast to previous datasets on mobile apps that recorded only a single interaction per user. Furthermore, MobileRec presents users’ ratings as well as sentiments on installed apps, and each app contains rich metadata such as app name, category, description, and overall rating, among others. We demonstrate that MobileRec can serve as an excellent testbed for app recommendation through a comparative study of several state-of-the-art recommendation approaches. The quantitative results can act as a baseline for other researchers to compare their results against. The MobileRec dataset is available at https://huggingface.co/datasets/recmeapp/mobilerec.

@inproceedings{sigir2023,
  author = {Maqbool, MH and Farooq, Umar and Mosharrof, Adib and Siddique, AB and Foroosh, Hassan},
  title = {MobileRec: A Large Scale Dataset for Mobile Apps Recommendation},
  year = {2023},
  isbn = {9781450394086},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  booktitle = {Proceedings of the 46th International ACM SIGIR Conference on Research and Development in Information Retrieval},
  pages = {3007–3016},
  numpages = {10},
  keywords = {googleplay dataset, recommendation, app recommendation},
  location = {Taipei, Taiwan},
  series = {SIGIR '23},
  doi = {10.1145/3539618.3591906}
}
CC’23
Linker Code Size Optimization for Native Mobile Applications
Gai Liu, Umar Farooq, Chengyan Zhao, Xia Liu, and Nian Sun
In Proceedings of the 32nd ACM SIGPLAN International Conference on Compiler Construction, 2023
ABS BIB HTML PDF

Modern mobile applications have grown rapidly in binary size, which restricts user growth and hinders updates for existing users. Thus, reducing the binary size is important for application developers. Recent studies have shown the possibility of using link-time code size optimizations by re-invoking certain compiler optimizations on the linked intermediate representation of the program. However, such methods often incur significant build time overhead and require intrusive changes to the existing build pipeline. In this paper, we propose several novel optimization techniques that do not require significant customization to the build pipeline and reduce binary size with low build time overhead. As opposed to re-invoking the compiler during link time, we perform true linker optimization directly as optimization passes within the linker. This enables more optimization opportunities such as pre-compiled libraries that prior work often could not optimize. We evaluate our techniques on several commercial iOS applications including NewsFeedApp, ShortVideoApp, and CollaborationSuiteApp, each with hundreds of millions of daily active users. Our techniques on average achieve 18.4% binary size reduction across the three commercial applications without any user-perceivable performance degradations.

@inproceedings{10.1145/3578360.3580256,
  author = {Liu, Gai and Farooq, Umar and Zhao, Chengyan and Liu, Xia and Sun, Nian},
  title = {Linker Code Size Optimization for Native Mobile Applications},
  year = {2023},
  isbn = {9798400700880},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3578360.3580256},
  doi = {10.1145/3578360.3580256},
  booktitle = {Proceedings of the 32nd ACM SIGPLAN International Conference on Compiler Construction},
  pages = {168–179},
  numpages = {12},
  keywords = {Code Size Optimization, Static Analysis, iOS},
  location = {Montr\'{e}al, QC, Canada},
  series = {CC 2023}
}
BigData’22
Proactive Prioritization of App Issues via Contrastive Learning
Moghis Fereidouni, Adib Mosharrof, Umar Farooq, and A.B. Siddique
In 2022 IEEE International Conference on Big Data (Big Data), Dec 2022
ABS BIB HTML PDF

Mobile app stores produce a tremendous amount of data in the form of user reviews, which is a huge source of user requirements and sentiments; such reviews allow app developers to proactively address issues in their apps. However, only a small number of reviews capture common issues and sentiments which creates a need for automatically identifying prominent reviews. Unfortunately, most existing work in text ranking and popularity prediction focuses on social contexts where other signals are available, which renders such works ineffective in the context of app reviews. In this work, we propose a new framework, PPrior, that enables proactive prioritization of app issues through identifying prominent reviews (ones predicted to receive a large number of votes in a given time window). Predicting highly-voted reviews is challenging given that, unlike social posts, social network features of users are not available. Moreover, there is an issue of class imbalance, since a large number of user reviews receive little to no votes. PPrior employs a pre-trained T5 model and works in three phases. Phase one adapts the pre-trained T5 model to the user reviews data in a self-supervised fashion. In phase two, we leverage contrastive training to learn a generic and task-independent representation of user reviews. Phase three uses radius neighbors classifier t o m ake t he final predictions. This phase also uses FAISS index for scalability and efficient search. To conduct extensive experiments, we acquired a large dataset of over 2.1 million user reviews from Google Play. Our experimental results demonstrate the effectiveness of the proposed framework when compared against several state-of-the-art approaches. Moreover, the accuracy of PPrior in predicting prominent reviews is comparable to that of experienced app developers.

@inproceedings{10020586,
  author = {Fereidouni, Moghis and Mosharrof, Adib and Farooq, Umar and Siddique, A.B.},
  booktitle = {2022 IEEE International Conference on Big Data (Big Data)},
  title = {Proactive Prioritization of App Issues via Contrastive Learning},
  year = {2022},
  month = dec,
  pages = {535-544},
  doi = {10.1109/BigData55660.2022.10020586}
}
OOPSLA’20
LiveDroid: Identifying and Preserving Mobile App State in Volatile Runtime Environments
Umar Farooq, Zhijia Zhao, Manu Sridharan, and Iulian Neamtiu
In Proc. ACM Program. Lang., Nov 2020
ABS BIB HTML PDF

Mobile operating systems, especially Android, expose apps to a volatile runtime environment. The app state that reflects past user interaction and system environment updates (e.g., battery status changes) can be destroyed implicitly, in response to runtime configuration changes (e.g., screen rotations) or memory pressure. Developers are therefore responsible for identifying app state affected by volatility and preserving it across app lifecycles. When handled inappropriately, the app may lose state or end up in an inconsistent state after a runtime configuration change or when users return to the app. To free developers from this tedious and error-prone task, we propose a systematic solution, LiveDroid, which precisely identifies the necessary part of the app state that needs to be preserved across app lifecycles, and automatically saves and restores it. LiveDroid consists of: (i) a static analyzer that reasons about app source code and resource files to pinpoint the program variables and GUI properties that represent the necessary app state, and (ii) a runtime system that manages the state saving and recovering. We implemented LiveDroid as a plugin in Android Studio and a patching tool for APKs. Our evaluation shows that LiveDroid can be successfully applied to 966 Android apps. A focused study with 36 Android apps shows that LiveDroid identifies app state much more precisely than an existing solution that includes all mutable program variables but ignores GUI properties. As a result, on average, LiveDroid is able to reduce the costs of state saving and restoring by 16.6X (1.7X - 141.1X) and 9.5X (1.1X - 43.8X), respectively. Furthermore, compared with the manual state handling performed by developers, our analysis reveals a set of 46 issues due to incomplete state saving/restoring, all of which can be successfully eliminated by LiveDroid.

@inproceedings{10.1145/3428228,
  author = {Farooq, Umar and Zhao, Zhijia and Sridharan, Manu and Neamtiu, Iulian},
  title = {LiveDroid: Identifying and Preserving Mobile App State in Volatile Runtime Environments},
  year = {2020},
  issue_date = {November 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {4},
  number = {OOPSLA},
  url = {https://doi.org/10.1145/3428228},
  doi = {10.1145/3428228},
  booktitle = {Proc. ACM Program. Lang.},
  month = nov,
  articleno = {160},
  numpages = {30}
}
ASPLOS’19
Scalable Processing of Contemporary Semi-Structured Data on Commodity Parallel Processors - A Compilation-Based Approach
Lin Jiang, Xiaofan Sun, Umar Farooq, and Zhijia Zhao
In Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, Nov 2019
ABS BIB HTML PDF

JSON (JavaScript Object Notation) and its derivatives are essential in the modern computing infrastructure. However, existing software often fails to process such types of data in a scalable way, mainly for two reasons: (i) the processing often requires to build a memory-consuming parse tree; (ii) there exist inherent dependences in processing the data stream, preventing any data-level parallelization. Facing the challenges, developers often have to construct ad-hoc pre-parsers to split the data stream in order to reduce the memory consumption and increase the data parallelism. However, this strategy requires more programming efforts. Moreover, the pre-parsing itself is non-trivial to parallelize, thus introducing a new serial bottleneck. To solve the dilemma, this work introduces a scalable yet fully automatic solution - a compilation system, namely JPStream, that compiles standard JSONPath queries into parallel executables with bounded memory footprints. First, JPStream adopts a stream processing design that combines the querying and parsing into one pass, without generating any in-memory parse tree. To achieve this, JPStream uses a novel joint compilation technique that compiles the queries and the JSON syntax together into a single automaton. Furthermore, JPStream leverages the "enumerability” of automaton to break the dependences and reason about the transition rules to prune infeasible states. It also features a runtime that learns structural constraints from the input to enhance the pruning. Evaluation on real-world JSON datasets with standard JSONPath queries shows that JPStream can reduce the memory consumption significantly, by up to 95%, meanwhile achieving near-linear speedup on multicore and manycore processors.

@inproceedings{10.1145/3297858.3304008,
  author = {Jiang, Lin and Sun, Xiaofan and Farooq, Umar and Zhao, Zhijia},
  title = {Scalable Processing of Contemporary Semi-Structured Data on Commodity Parallel Processors - A Compilation-Based Approach},
  year = {2019},
  isbn = {9781450362405},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3297858.3304008},
  doi = {10.1145/3297858.3304008},
  booktitle = {Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems},
  pages = {79–92},
  numpages = {14},
  location = {Providence, RI, USA},
  series = {ASPLOS '19}
}
© Copyright 2024 Umar Farooq. Powered by Jekyll with al-folio theme.

